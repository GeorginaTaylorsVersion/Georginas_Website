{"pageProps":{"term":"1B","course":"CS 116","unit":"6. Iterative Structures in Python","note":"Module 6 Iterative Structures in Python","noteContent":"<h1>Module 6: Iterative Structures in Python</h1>\n<p>There are 2 main ways to parse through a list, for loop and while loop, where a for loop generally do something for every element of the list whereas a while loop will continuously run so long something is true.</p>\n<p>While Loops</p>\n<pre><code class=\"python-code-box\">def singleton(n):\n  answer = []\n  if n >= 0:\n    answer.append(n)\n    n = n - 1 \n# after n = n - 1 run return answer\n  return answer\n</code></pre>\n<pre><code class=\"python-code-box\">def singleton2(n):\n  answer = [] ## initialize loop variables\n  while n >= 0: #'n >= 0' is loop guard\n    answer.append(n) #update variables used in loop guard\n    n = n - 1 #update value being calculated\n# after n = n - 1 run while n >= 0\n  return answer \n# return answer is 'out of the loop'\n</code></pre>\n<p>Template:</p>\n<pre><code class=\"python-code-box\">## initialize loop variables\nwhile test: # loop guard\n  ## body, including statements to:\n  ## - update variables used in loop guard\n  ## - update value being calculated\n## additional processing\n</code></pre>\n<h3><strong><code>while</code> Loop Basics</strong></h3>\n<ul>\n<li>If the loop guard is <code>True</code>, execute the loop body.</li>\n<li>If the loop guard is <code>False</code>, do not execute the loop body.</li>\n<li>After completing the loop body, evaluate the loop guard again.</li>\n</ul>\n<pre><code class=\"python-code-box\">def is_prime(n):\n  '''\n  Returns True if n is prime and False otherwise\n  \n  is_prime: Nat -> Bool\n  '''    \n  if n &#x3C; 2:\n    return False\n  test_factor = 2 #define a test_factor to start, not 1 which divides everything\n  while test_factor &#x3C; n: #keep running while as long as test_factor &#x3C; n\n    if n % test_factor == 0: #if n can be divided by any number that is 1 &#x3C; and &#x3C; n\n      return False # then it is not a prime\n    else: #if it can not be divided \n      test_factor = test_factor + 1 #keep checking until test_factor = n\n  return True #if exited while loop, then all possible test_factor have been check, is prime\n</code></pre>\n<pre><code class=\"python-code-box\">##another version\ndef is_prime(n):\n  '''\n  Returns True if n is prime and False otherwise\n  \n  is_prime: Nat -> Bool\n  '''    \n  if n &#x3C; 2:\n    return False\n  test_factor = 2\n  while test_factor * test_factor &#x3C;= n: \n  #f n has any factor greater than its square root, \n\t#there must also be a corresponding factor smaller than its square root.\n    if n % test_factor == 0:\n      return False\n    test_factor += 1 #the code increase test_factor by 1\n  return True\n</code></pre>\n<pre><code class=\"python-code-box\">##this is an infinite loop\ndef loop_forever():\n  ''' \n  Tries to count to 10 by counting by twos.\n  \n  loop_forever: None -> None\n  '''\n  i = 1\n  my_list = []\n  while i != 10:\n    my_list.append(i)\n    i = i + 2\n  return\n\nloop_forever()\n</code></pre>\n<pre><code class=\"python-code-box\">##Factorial Up\ndef factorial(n):\n  '''\n  Returns n!\n  \n  factorial: Nat -> Nat\n  \n  Examples:\n     factorial(0) => 1\n     factorial(4) => 24\n  '''\n  if n &#x3C;= 1:\n    return 1\n  test_factor = 2\n  final = 1\n  while test_factor &#x3C;= n:\n    final = final * test_factor\n    test_factor += 1\n  return final\n</code></pre>\n<pre><code class=\"python-code-box\">##Factorial Down\ndef factorial(n):\n  '''\n  Returns n!\n  \n  factorial: Nat -> Nat\n  \n  Examples:\n     factorial(0) => 1\n     factorial(4) => 24\n  '''\n  if n == 0:\n    return 1\n  final = 1\n  while n >= 1:\n    final = final * n\n    n -= 1\n  return final\n</code></pre>\n<p>Write the body of a function halve_evens(L) that returns None and mutates L so that all even numbers in L are halved.\nYou must use while loops in your solution. Do not use recursion or abstract list functions.</p>\n<pre><code class=\"python-code-box\">def halve_evens(L):\n  '''\n  Returns None and mutates L so that all even numbers are halved\n  \n  Effects: Mutates L\n  \n  halve_evens: (listof Int) -> None\n  \n  Examples:\n     L = []\n     halve_evens(L) => None\n     and L is still []\n     \n     L = [1,3,5,7]\n     halve_evens(L) => None\n     and L is still [1,3,5,7]\n     \n     L = [1,2,3,4]\n     halve_evens(L) => None\n     and L has been mutated to [1,1,3,2]\n\n  #Wrong version:\n  if L == []:\n    return [] #this is wrong because it returns a list, not None\n  list = [] #this is wrong because it initializes a new list, not mutates the original list\n  index = 0\n  while len(L) > index:\n    if L[index] % 2 == 0:\n      list.append(L[index] // 2) #this does not mutate L, it creates a new list\n    else: list.append(L[index]) \n    index += 1\n  return list #this is wrong because it returns a list, not None\n  '''\n  index = 0\n  while index &#x3C; len(L):\n    if L[index] % 2 == 0:\n      L[index] = L[index] // 2\n    index += 1\n</code></pre>\n<hr>\n<p>For Loops</p>\n<h3><strong>Compare and Contrast <code>while</code> and <code>for</code> Loops</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>Function</strong></th>\n<th><strong><code>while</code> Loop</strong></th>\n<th><strong><code>for</code> Loop</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Initialization</td>\n<td>Loop counter should be initialized outside loop</td>\n<td>Loop counter initialized automatically</td>\n</tr>\n<tr>\n<td>Continuation</td>\n<td>Includes continuation test before body</td>\n<td>Continues while more elements in the collection</td>\n</tr>\n<tr>\n<td>Updates</td>\n<td>Should update loop variables in body of loop</td>\n<td>Loop variable updated automaticallyDoes not update in loop</td>\n</tr>\n<tr>\n<td>Repetition</td>\n<td>Body contains steps to repeat</td>\n<td>Body contains steps to repeat</td>\n</tr>\n</tbody>\n</table>\n<p>Template to iterate over a collection via for loops</p>\n<pre><code class=\"python-code-box\">for item in collection: \n\t#loop_body: some operations involving item\n</code></pre>\n<pre><code class=\"python-code-box\">## Sum of Squares\ndef sum_squares(a, b):\n  '''\n  Returns the sum of squares from a to b inclusive.\n  \n  sum_squares: Nat Nat -> Nat\n  \n  Examples:\n     sum_squares(2, 1) => 0\n     sum_squares(1, 2) => 5\n  '''\n  sum_all = 0\n  for i in range(a,b + 1):\n    sq = i*i\n    sum_all = sum_all + sq\n  return sum_all\n\ncheck.expect(\"Test 1\", sum_squares(2,1), 0)\ncheck.expect(\"Test 2\", sum_squares(1,2), 5)\ncheck.expect(\"Test 3\", sum_squares(2,5), 54)\n</code></pre>\n<pre><code class=\"python-code-box\">#mutation\ndef multiply_by(values, factor):\n  '''\n  Returns None and mutates values so that each entry\n  is multiplied by factor\n  \n  Effects: Mutates values\n  \n  multiply_by: (listof Int) Int -> None\n  \n  Examples:\n     L = []\n     multiply_by(L, 14) => None\n     and L is still []\n     \n     L = [1, 2, 3]\n     multiply_by(L, 4) => None\n     and L is [4, 8, 12]\n     \n     L = [1, 22]\n     multiply_by(L, 0) => None\n     and L is [0, 0]\n  '''\n  for pos in range(len(values)):\n    values[pos] = values[pos] * factor #make sure to check its values[pos] not values\n</code></pre>\n<pre><code class=\"python-code-box\">def halve_evens_ret(L):\n  '''\n  Returns a copy of L with all even numbers divided by 2\n  \n  halve_evens_ret: (listof Int) -> (listof Int)\n  \n  Examples:\n     halve_evens_ret([]) => []\n     halve_evens_ret([1,3,5,7]) => [1,3,5,7]\n     halve_evens_ret([1,2,3,4]) => [1,1,3,2]\n  '''\n  new_list = []\n  for x in L:\n      if x % 2 == 0:\n          # Even, so append its half\n          new_list.append(x // 2)\n      else:\n          # Odd, so append as is\n          new_list.append(x)\n  \n  # Return the fully built list\n  return new_list\n</code></pre>\n<pre><code class=\"python-code-box\">def halve_evens(L):\n  '''\n  Returns None and mutates L so that all even numbers are halved\n  \n  Effects: Mutates L\n  \n  halve_evens: (listof Int) -> None\n  \n  Examples:\n     L = []\n     halve_evens(L) => None\n     and L is still []\n     \n     L = [1,3,5,7]\n     halve_evens(L) => None\n     and L is still [1,3,5,7]\n     \n     L = [1,2,3,4]\n     halve_evens(L) => None\n     and L has been mutated to [1,1,3,2]\n  '''\n  for i in range(len(L)):\n    if L[i] % 2 == 0:\n      L[i] = L[i] /2\n    else: L[i] = L[i]\n</code></pre>\n<hr>\n<p>Looping over Nested Lists</p>\n<pre><code class=\"python-code-box\">def negate_first(L, val):\n  '''\n  Mutates the list so the first occurrence of val is negated\n  \n  Effects: Mutates L\n  \n  negate_first: (listof (listof Int)) -> None\n  Requires: \n     val occurs in L\n  \n  Examples:\n     L = []\n     negate_first(L, 10) => None\n     and L is not mutated\n     \n     L = [[0], [3,2,1], [] ,[17,1,9,10], [1, 2]]\n     negate_first(L, 1) => None\n     and L is mutated to:\n     [[0], [3,2,-1], [] ,[17,1,9,10], [1, 2]]\n  '''\n  for sublist in L:\n    for i in range(len(sublist)):\n      if sublist[i] == val:\n        sublist[i] = -val\n        return\n</code></pre>\n<pre><code class=\"python-code-box\">def column(grid, col_num):\n  '''\n  Returns the col_num column of grid\n  \n  column: Grid Nat -> (listof Nat)\n  Requires: \n     grid is not empty\n     col_num &#x3C;= len(grid)-1\n  \n  Examples:\n     column([[1]], 0) => [1]\n     column([[10,2],[20,1]], 1) => [2, 1]\n  '''\n  result = []\n  for sublist in grid:\n    for i in sublist:\n      col = sublist[col_num]\n    result.append(col)\n  return result\n</code></pre>","noteData":{},"unitTitle":"6. Iterative Structures in Python"},"__N_SSG":true}