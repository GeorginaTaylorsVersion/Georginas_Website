{"pageProps":{"term":"1B","course":"CS 116","unit":"9. Additional Options for Organizing Data","note":"Module 9 Additional Options for Organizing Data 1a9115b71c118095b0e9f726cf2ec236","noteContent":"<h1>Module 9: Additional Options for Organizing Data</h1>\n<p><strong>Keys</strong> describe something basic and unique about an object</p>\n<p><strong>Values</strong> describe a property of a key</p>\n<p><strong>Dictionaries</strong> are collections of these key-value pairs</p>\n<p>In Python, we store these in dictionaries which we document by writing <strong><code>(dictof key_type value_type)</code></strong>. As examples:</p>\n<ul>\n<li><code>student_id:major</code> and <code>social_insurance_number:name</code> pairs could be stored in a <code>(dictof Nat Str)</code>.</li>\n<li><code>dna_signature:organism_type</code> and <code>word:definition</code> pairs could be stored in a <code>(dictof Str Str)</code>.</li>\n</ul>\n<p>To initialize a dictionary, we can use either <code>d = {}</code> or we can initialize some pairs in <code>d</code> using the syntax <code>d = {key1:value1, ... , keyn:valuen}</code></p>\n<pre><code class=\"python-code-box\">design recipe: (dictof key_type value_type)\n\nTo initialize a dictionary, we can use either d = {} or we can initialize some pairs in d using the syntax: d = {key1:value1, ... , keyn:valuen}\n\nd[k] which retrieves the value associated with the key k\nd[k] = v which assigns the value v to the key k\nk in d which determines whether or not k is a key in d. \n(Compare this to the situation in lists when asking if k in L which takes O(n) time!)\n\nlen(d) which returns the number of key:value pairs in the dictionary in O(1) time.\nlist(d.keys()) which returns a list of the keys in d in O(n) time.\nlist(d.values()) which returns a list of the values in d in O(n) time.\nd.pop(k) which returns the value d[k] and mutates the dictionary by removing the key-value pair k:d[k] in O(1) time.\n</code></pre>\n<pre><code class=\"python-code-box\">## Example: Counting number of times distinct \n## characters occur in a string\ndef character_count (sentence):\n  '''\n  Returns a dictionary that consists of a character\n  and count of each character in the string sentence.\n  \n  character_count: Str->(dictof Str Nat)\n  \n  Examples:\n     character_count(\"\") => {}\n     character_count(\"banana\") => {'a':3, 'b': 1, 'n':2}\n  '''\n  \n  ##Initialize an empty dictionary\n  characters = {}\n  for char in sentence:\n    ##Notice the special case if char not in characters\n    if char in characters:\n      characters[char] += 1\n    else:\n      characters[char] = 1\n  return characters\n\n#check.expect(\"Test Empty\", character_count(\"\"), {})\n\n## Notice in the test the order of key-value pairs in\n## the dictionary do not matter for testing purposes.\n#check.expect(\"Test\", character_count(\"banana\"), {'b':1, 'a':3, 'n':2})\n\n## Next, find the most common character in a string\ndef most_common_character (sentence):\n  '''\n  Returns the most common character in the string sentence.\n  If there is a tie, returns any of the most common characters.\n   \n  most_common_character: Str -> Str\n  Requires: \n     len(sentence) > 0\n     \n  Examples: \n    most_common_character(\"c\") => \"c\"\n    most_common_character(\"banana\") => \"a\"\n  '''\n\n  ##Use the previous function as a helper\n  chars = character_count(sentence)\n  most_common = \"\"\n  max_times = 0\n  \n  ##Loop through the keys in a dictionary chars\n  for curr_char in chars:  \n    if chars[curr_char] > max_times:\n      most_common = curr_char\n      max_times = chars[curr_char]\n  return most_common\n\n#check.expect(\"Test 1\", most_common_character(\"c\"), \"c\")\n#check.expect(\"Test 2\", most_common_character(\"banana\"), \"a\")\n</code></pre>\n<p>class Country:\nFields:\ncontinent (Str),\nleader (Str),\npopulation (Nat)</p>\n<p>When a class is defined like above, Python sets up a collection of magic methods, which start and end with two underscores, for the user to be able to use without defining them. Here is a small collection of what is defined:</p>\n<p><strong>init</strong>: Used to give a more meaningful initialization of an object.\n<strong>repr</strong> or <strong>str</strong>: Used to give a more user friendly representation of a printed object.\n<strong>eq</strong> (and other comparison operators like <strong>gt</strong>): Used to redefine the comparison operator == (and likewise for others).\nThe class docstring can be accessed by the magic method <strong>doc</strong>. Once you've defined the Country class, try the following: Country.<strong>doc</strong></p>\n<pre><code class=\"python-code-box\">\nclass Country: \n\tdef __init__(self, cont, lead, pop):\n\t\tself.continent = cont\n\t\tself.leader = lead\n\t\tself.population = pop\n\t\n\tdef __repr__(self):\n\t\ts = \"CNT: {0.continent}; L: {0.leader}; POP: {0.population}\"\n\t\treturn s.format(self)\n\t\n\tdef __eq__(self, other):\n\t\treturn isinstance(other, Country) and\\\n\t\t       self.continent == other.continent and\\\n\t\t       self.leader == other.leader and\\\n\t\t       self.population == other.population\n\n##Testing __init__\ncanada = Country(\"North America\", \"Trudeau\", 37742157)\n\ncheck.expect(\"Testing Canada field continent\", \n   canada.continent, \"North America\")\ncheck.expect(\"Testing Canada field leader\", canada.leader, \"Trudeau\")\ncheck.expect(\"Testing Canada field pop\", canada.population, 37742157)\n\n##Testing __repr__\n\ncheck.set_print_exact(\"CNT: North America; L: Trudeau; POP: 37742157\")\ncheck.expect(\"Testing Canada print\", print(canada), None)\n  \n##OR\n  \ncheck.expect(\"Testing Canada print\", str(canada), \n  \"CNT: North America; L: Trudeau; POP: 37742157\")\n\n##Testing __eq__\n\nindia = Country(\"Asia\", \"Modi\", 1380004385)\nindia_copy = Country(india.continent, india.leader, india.population)\n\ncheck.expect(\"Testing == False\", india == canada, False)\ncheck.expect(\"Testing == True\", india == india_copy, True)\ncheck.expect(\"Testing is False\", india is india_copy, False)\n</code></pre>\n<pre><code class=\"python-code-box\">def election(self, winner):\n    '''\n    Updates leader to winner, and prints a \n    message about the winner\n  \n    Effects: \n       Mutates self\n       Prints two lines\n\n    election: Country Str -> None\n\n    Example: \n       If c = Country(\"US\", \"Trump\", 331002647)\n       calling, c.election(\"Biden\"), mutates c to\n       Country(\"US\", \"Biden\", 331002647) and prints\n       Election Results:\n       Biden replaces Trump as leader\n    '''\n    print(\"Election Results:\")\n    if self.leader == winner:\n      print(\"{0} re-elected\".format(self.leader))\n    else:\n      print(\"{0} replaces {1} as leader\".format(winner, self.leader))\n      self.leader = winner\n</code></pre>\n<pre><code class=\"python-code-box\">class Country: \n  def __init__(self, cont, lead, pop):\n    self.continent = cont\n    self.leader = lead\n    self.population = pop\n\n  def __repr__(self):\n    s = \"CNT: {0.continent}; L: {0.leader}; POP: {0.population}\"\n    return s.format(self)\n    \ncanada = Country(\"North America\", \"Trudeau\", 37742157)\nprint(canada.__repr__()) ##DO NOT DO THIS!!!\nprint(canada) ##This is how you should print a country!\n</code></pre>","noteData":{},"unitTitle":"9. Additional Options for Organizing Data"},"__N_SSG":true}