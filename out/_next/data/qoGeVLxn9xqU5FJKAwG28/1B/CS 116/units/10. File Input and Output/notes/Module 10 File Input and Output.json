{"pageProps":{"term":"1B","course":"CS 116","unit":"10. File Input and Output","note":"Module 10 File Input and Output","noteContent":"<h1>Module 10: File Input and Output</h1>\n<pre><code class=\"python-code-box\">Template for Reading Files:\n\nfin = open(filename, \"r\")\n## read file using fin.readline() in a loop, \n## or using fin.readlines()\n## Note: resulting strings contain newlines\nfin.close()\n\nTemplate for Writing Files:\n\nfout = open(filename, \"w\")\n## write to file usingfout.write(s) \n## in a loop, or fout.writelines(los)\n## Note: newlines are written only \n##       if strings include them\nfout.close()\n</code></pre>\n<pre><code class=\"python-code-box\">class Name:\n  '''\n  Fields: \n     first (Str), \n     last (Str)\n  '''\n  def __init__(self, fn, ln):\n    '''\n    Initializes a Name object\n    by calling Name(fn, ln).\n    \n    Effects: Mutates self\n    \n    __init__: Name Str Str -> None\n    '''\n    self.first = fn\n    self.last = ln\n  \n  def __eq__(self, other):\n    '''\n    __eq__: Name Any -> Bool\n    '''\n    return isinstance(other, Name) and \\\n          self.first == other.first and \\\n          self.last == other.last\n    \ndef str_name(s):\n  '''\n  Returns Name from s, where s has the form \n  first last\" or \"first last\\n\"\n  but s may include extra whitespaces above\n    \n  str_name: Str -> Name\n  \n  Example:\n     str_name(\"Carmen    Bruni  \\n\") \\\n           => Name(\"Carmen\", \"Bruni\")\n  '''\n  nameslist = s.split()\n  return Name(nameslist[0], nameslist[1])\n  \ncheck.expect(\"Test\", \n    str_name(\"Carmen    Bruni  \\n\"), \n       Name(\"Carmen\", \"Bruni\"))\n</code></pre>\n<p>design recipe:</p>\n<p>Purpose: Should include details about what is read from a file or written to a file\nEffects: Should mention reading from a file or writing to a file (don't need details here)\nContract: Should mention that file names exist if being read from.\nExamples: Should be explicit about what is in the input file and what is in the output file</p>\n<p>actual: is the name of file created by program\nexpected: is the name of file you created in your text editor (or using the 'add file' button in EdX) with the expected output</p>\n<pre><code class=\"python-code-box\">import check\ndef file_filter(fname, minimum):\n  #\n  Opens the file called fname,that contains\n  one integer on each line, reads in each \n  integer, and writes each integer>minimum \n  to a new file, \"summary.txt\". \n    \n  Effects: \n     Reads file called fname\n     Writes to a file called \"summary.txt\" \n    \n  file_filter: Str Nat -> None\n  Requires: \n     0 &#x3C;= minimum &#x3C;= 100\n     fname file exists\n  \n  Examples:\n     If \"empty.txt\" is empty, then \n     file_filter(\"empty.txt\", 1) will create an \n     empty file named summary.txt\n     \n     If \"eg2.txt\" contains 35, 75, 50, 90 (one per \n     line) then file_filter(\"eg2.txt\", 50) will \n     create a file named \"summary.txt\" \n     containing 75, 90 (one per line)\n  #\n\n  fin = open(fname, \"r\")\n  lst = fin.readlines()\n  fin.close()\n  fout = open(\"summary.txt\", \"w\")\n  for line in lst:\n      if int(line.strip()) > minimum:\n          fout.write(line)\n  fout.close()\n\n# Test 1: empty file\n# q3t1_input.txt contains nothing\n# q3t1_expected.txt contains nothing\ncheck.set_file_exact(\"summary.txt\", \"q3t1_expected.txt\")\ncheck.expect(\"Q3T1: Empty file\", file_filter(\"q3t1_input.txt\", 40), None)\n\n# Test 2: general case\n# q3t2_input.txt contains first thirty positive integers, one line each\n# q3t2_expected.txt contains the numbers form 16 to 30 one line each\ncheck.set_file_exact(\"summary.txt\", \"q3t2_expected.txt\")\ncheck.expect(\"Q3T2: First 30 ints\", file_filter(\"q3t2_input.txt\", 15), None)\n</code></pre>","noteData":{},"unitTitle":"10. File Input and Output"},"__N_SSG":true}